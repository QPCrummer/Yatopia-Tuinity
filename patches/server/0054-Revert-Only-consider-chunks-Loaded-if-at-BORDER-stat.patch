From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@spottedleaf.dev>
Date: Sun, 20 Sep 2020 14:51:20 -0700
Subject: [PATCH] Revert "Only consider chunks Loaded if at BORDER status"

The method used to remove Tile Entities from the world is
NOT safe to use. Let's say that during tile entity tick, a single
chunk is unloaded (ticket level -> 34) and then brought to ticket
level 33 again (this is a very possible scenario thanks to my changes
to run mid-tick during tile entity ticking). First what happens
is all of the TileEntity objects are shoved onto the unload list,
and then on load all of the TileEntity objects are shoved onto
the pending list (the chunk can actually be loaded later in the
tick, and the result will be the same, but it must be in the same tick).
The loading in of the chunk does not remove the TileEntity objects from the
unloading list! And at the start of tile entity ticking, pending unload is
processed. Which means, next tick, all of the tile entities
will be removed from the TE lists - when they should not be removed.

While I could change the method to use the removeTileEntity
and setTileEntity calls, neither of these have actually be designed
to handle adding/removing the same TileEntity object in the manner
above. For example, setTileEntity does not check if the specified
TileEntity is already in the pending list.

In general the TileEntity system is fragile as hell and attempting
to fix it will probably cause more issues than it would fix.
So, the changes paper made have to be reverted.
In general, inactive TileEntities do not appear to be an issue
at all so the tradeoff made here is perfect.

For regular entities, removal is likely fine - I cannot see any
code issues in theory (and the tests done by paper users showed it's fine).
However, by removing the entities from the world they can no longer
be checked for despawn. They are currently checked for despawn
so that entities cannot sit in inactive chunks and then be loaded in later
causing a spike in entity counts from non-persistent entities.
The previous chunk system handled this by refusing to save non-persistent entities
on chunk unload.

I want to take a look at reintroducing this kind of change later
because removing inactive entities from the entity state is going
to provide a small performance boost (it's not big because
a lot of patches I've written (some in paper) addresses the big issues
already). I will likely reintroduce the change by hard unloading
the chunks, as that will likely play a lot better with how
the existing system expects things to work as we don't deal
with the same TE/Entity objects, and we get to remove non-persistent
entities on unload, as well as eliminating the heavy memory overhead of
inactive chunks.

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index e852fd5b4a70397e2b3a5e6cc35e192deb1a8196..f1a382c3d3f918419a2d72bdb41914b95b7aeaa8 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -843,7 +843,7 @@ public class Chunk implements IChunkAccess {
         int chunkX = this.loc.x;
         int chunkZ = this.loc.z;
         ChunkProviderServer chunkProvider = ((WorldServer)this.world).getChunkProvider();
-        chunkProvider.playerChunkMap.loadChunk(this); // Paper - move load logic from the entering full status to when it enters border status instead
+        //chunkProvider.playerChunkMap.loadChunk(this); // Paper - move load logic from the entering full status to when it enters border status instead // Tuinity - restore vanilla unload behavior
         for (int dx = -NEIGHBOUR_CACHE_RADIUS; dx <= NEIGHBOUR_CACHE_RADIUS; ++dx) {
             for (int dz = -NEIGHBOUR_CACHE_RADIUS; dz <= NEIGHBOUR_CACHE_RADIUS; ++dz) {
                 Chunk neighbour = chunkProvider.getChunkAtIfLoadedMainThreadNoCache(chunkX + dx, chunkZ + dz);
@@ -916,9 +916,11 @@ public class Chunk implements IChunkAccess {
         this.resetNeighbours();
         // Paper end
         // Paper start - move unload logic from the actual full unload to be when it leaves border status
-        chunkProvider.playerChunkMap.loadedChunks.remove(loc.longKey);
-        setLoaded(false);
-        this.world.unloadChunk(this);
+        // Tuinity start - restore vanilla unload behavior
+        //chunkProvider.playerChunkMap.loadedChunks.remove(loc.longKey);
+        //setLoaded(false);
+        //this.world.unloadChunk(this);
+        // Tuinity end - restore vanilla unload behavior
         // Paper end
     }
     // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 430d200b3eeb4b130662d995b40644b76cbfb073..0afa3d8b681d87526245f830220199fcfc1ff6a6 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -1062,15 +1062,17 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                 if ((removed = this.pendingUnload.remove(i, playerchunk)) && ichunkaccess != null) { // Tuinity end
                     // Paper start - coment out and move to ChunkUnloadEvent
                     if (ichunkaccess instanceof Chunk) {
-                        //((Chunk) ichunkaccess).setLoaded(false);
+                        ((Chunk) ichunkaccess).setLoaded(false); // Tuinity - restore vanilla unload behavior
                     }
 
                     //this.saveChunk(ichunkaccess);// Paper - delay
-//                    if (this.loadedChunks.remove(i) && ichunkaccess instanceof Chunk) {
-//                        Chunk chunk = (Chunk) ichunkaccess;
-//
-//                        this.world.unloadChunk(chunk);
-//                    }
+                    // Tuinity start - restore vanilla unload behavior
+                    if (this.loadedChunks.remove(i) && ichunkaccess instanceof Chunk) {
+                        Chunk chunk = (Chunk) ichunkaccess;
+
+                        this.world.unloadChunk(chunk);
+                    }
+                    // Tuinity end - restore vanilla unload behavior
                     // Paper end
                     this.autoSaveQueue.remove(playerchunk); // Paper
 
@@ -1340,6 +1342,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                     return PlayerChunk.getChunkState(playerchunk.getTicketLevel());
                 });
                 chunk.addEntities();
+                this.loadChunk(chunk); // Tuinity - restore vanilla unload behavior
                 // Paper start
                 return chunk;
             } // Paper
@@ -1349,7 +1352,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             this.mailboxMain.a(ChunkTaskQueueSorter.a(runnable, playerchunk.i().pair(), () -> 1)); // Paper - final loads are always urgent!
         });
     }
-    public void loadChunk(Chunk chunk) {
+    private void loadChunk(Chunk chunk) { // Tuinity - restore vanilla unload behavior - use private to try and force compile fails on usage change
         if (true) {
             if (true) {
                 ChunkCoordIntPair chunkcoordintpair = chunk.getPos();
